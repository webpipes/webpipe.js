// Generated by CoffeeScript 1.4.0
(function() {
  var webpipe, _request, _xhr;

  webpipe = typeof exports !== "undefined" && exports !== null ? exports : (this.webpipe = {});

  webpipe.options = function(url, callback) {
    return _request('OPTIONS', url, null, function(err, meta) {
      if (err) {
        return callback(err, meta);
      } else {
        if (!meta.url) {
          meta.url = url;
        }
        if (meta.url === !url) {
          console.warn('URLs do not match: %s  %s', url, meta.url);
        }
        return callback(null, meta);
      }
    });
  };

  webpipe.execute = function(url, inputs, callback) {
    return _request('POST', url, {
      'inputs': [inputs]
    }, callback);
  };

  _request = function(method, url, body, callback) {
    var req;
    req = _xhr();
    req.open(method, url, true);
    req.onreadystatechange = function() {
      var object;
      if (req.readyState === 4) {
        if (req.status === 200) {
          try {
            object = JSON.parse(req.responseText);
          } catch (err) {
            return callback(err, null);
          }
          return callback(null, object);
        } else {
          return callback({
            code: req.status,
            message: req.statusText
          }, null);
        }
      }
    };
    if (body) {
      return req.send(JSON.stringify(body));
    } else {
      return req.send(null);
    }
  };

  _xhr = function() {
    var req;
    if (typeof ActiveXObject !== "undefined" && ActiveXObject !== null) {
      return req = new ActiveXObject('Microsoft.XMLHTTP');
    } else if (typeof XMLHttpRequest !== "undefined" && XMLHttpRequest !== null) {
      return req = new XMLHttpRequest();
    } else if (typeof require !== "undefined" && require !== null) {
      return req = new (require('xmlhttprequest').XMLHttpRequest);
    }
  };

}).call(this);
